package com.quartztop.bot.tg_bot.services;

import com.quartztop.bot.tg_bot.config.BotConfig;
import com.quartztop.bot.tg_bot.dto.StockByCategoryResponse;
import com.quartztop.bot.tg_bot.dto.StockByProductResponse;
import com.quartztop.bot.tg_bot.dto.StockByStoreResponse;
import com.quartztop.bot.tg_bot.dto.TelegramActionDto;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.ResourceAccessException;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriUtils;

import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@Service
@Slf4j
public class StockClient {

    private final RestTemplate restTemplate;
    private final BotConfig botConfig;

    private static final String FREE_SPACE = "        ";

    public StockClient(RestTemplate restTemplate, BotConfig botConfig) {
        this.restTemplate = restTemplate;
        this.botConfig = botConfig;
    }

    public List<StockByCategoryResponse> getStock(String search) {


        String url = botConfig.getAppUrl() + "/stock/search?search=" + UriUtils.encode(search, StandardCharsets.UTF_8);
        try {
            ResponseEntity<StockByCategoryResponse[]> response = restTemplate.getForEntity(url, StockByCategoryResponse[].class);
            return Arrays.asList(Objects.requireNonNull(response.getBody()));
        } catch (ResourceAccessException e) {
            log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API –æ—Å—Ç–∞—Ç–∫–æ–≤: {}", e.getMessage());
            return null;
        } catch (Exception e) {
            log.error("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤", e);
            return null;
        }
    }

    public List<TelegramActionDto> getActions() {
        String url = botConfig.getAppUrl() + "/actions";
        ResponseEntity<TelegramActionDto[]> response = restTemplate.getForEntity(url, TelegramActionDto[].class);
        return Arrays.asList(Objects.requireNonNull(response.getBody()));
    }

    public NextActionResult getNextAction(Long currentId) {
        String url = botConfig.getAppUrl() + "/actions/next";
        if (currentId != null) {
            url += "?currentId=" + currentId;
        }
        try {
            ResponseEntity<TelegramActionDto> response =
                    restTemplate.getForEntity(url, TelegramActionDto.class);
            return new NextActionResult(true, response.getBody());

        } catch (ResourceAccessException e) {
            log.warn("‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {}", e.getMessage());
        } catch (HttpClientErrorException e) {
            log.warn("‚ùå –û—à–∏–±–∫–∞ –æ—Ç API: {}", e.getStatusCode());
        } catch (Exception e) {
            log.error("üî• –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ nextAction", e);
        }
        return new NextActionResult(false, null); // –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ—Å—Ç—É—á–∞—Ç—å—Å—è
    }

    public TelegramActionDto getActionById(long actionId) {
        String url = botConfig.getAppUrl() + "/actions/" + actionId;

        log.error("PRINT URL " + url);

        ResponseEntity<TelegramActionDto> response = restTemplate.getForEntity(url, TelegramActionDto.class);
        return Objects.requireNonNull(response.getBody());

    }

    public String getStockBySearch(String search) {
        List<StockByCategoryResponse> stockList = getStock(search);
        if (stockList == null) {
            return "üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        }
        if (stockList.isEmpty()) {
            return "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: *" + search + "*";
        }
        StringBuilder response = new StringBuilder();
        for (StockByCategoryResponse categoryResponse : stockList) {
            String category = categoryResponse.getCategory();
            List<StockByProductResponse> products = categoryResponse.getProductsList();

            response.append("üì¶ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* ").append(category).append("\n");

            for (StockByProductResponse product : products) {
                response
                        .append("\n")
                        .append("\uD83D\uDD38  <b>").append(product.getProductName()).append("</b>")
                        .append("\n").append(FREE_SPACE).append("–ê—Ä—Ç. ").append(product.getArticle()).append("\n")
                        .append(FREE_SPACE).append(product.getThicknessProduct()).append(" –º–º. ")
                        .append("(").append(product.getSortProduct()).append(" —Å–æ—Ä—Ç)\n")
                        .append(FREE_SPACE).append(product.getFormatProduct()).append(" ").append(product.getSurfaceProduct())
                        .append("\n").append(FREE_SPACE).append("–†–∞–∑–º–µ—Ä—ã: ").append(product.getSizeProduct());
                if(product.getRecommendedPrice() != null && !product.getRecommendedPrice().equals("0")) {
                    response.append("\n").append(FREE_SPACE).append("–†–†–¶: ").append(product.getRecommendedPrice());
                }

                response.append("\n\n").append(FREE_SPACE).append("–ù–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö:").append("\n");

                List<StockByStoreResponse> stores = product.getByStoreResponseList();
                for (StockByStoreResponse store : stores) {
                    response.append("\n").append(FREE_SPACE).append("<u>").append(store.getNameStore()).append("</u> ");
                    if (store.getStock() > 0) {
                        response.append(": <b>").append(store.getStock()).append("</b>\n");
                    } else  {
                        response.append("<b>: 0.0</b>\n");
                    }
                    if(store.getReserve() > 0) response.append(FREE_SPACE).append("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ: <b>").append(store.getReserve()).append("</b>\n");
                    if (store.getInTransit() > 0) response.append(FREE_SPACE).append("–û–∂–∏–¥–∞–µ—Ç—Å—è: <b>").append(store.getInTransit()).append("</b>\n");

                    float countAvailable = store.getStock() + store.getInTransit() - store.getReserve();
                    if (countAvailable < 0) countAvailable = 0;

                    response.append(FREE_SPACE).append("–î–æ—Å—Ç—É–ø–Ω–æ –∫ –∑–∞–∫–∞–∑—É: <b>").append(countAvailable).append("</b>\n\n");
                }
            }
            response.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"); // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        }
        return response.toString();
    }
}
