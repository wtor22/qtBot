package com.quartztop.bot.tg_bot.telegram;


import com.quartztop.bot.tg_bot.config.BotConfig;
import com.quartztop.bot.tg_bot.dto.TelegramMessageDto;
import com.quartztop.bot.tg_bot.entity.activity.TicketMessage;
import com.quartztop.bot.tg_bot.entity.botUsers.BotUser;
import com.quartztop.bot.tg_bot.entity.botUsers.BotUserStatus;
import com.quartztop.bot.tg_bot.entity.activity.ClickType;
import com.quartztop.bot.tg_bot.entity.botUsers.Roles;
import com.quartztop.bot.tg_bot.integration.ActionClient;
import com.quartztop.bot.tg_bot.integration.ReportRequestClient;
import com.quartztop.bot.tg_bot.integration.SendMessageToWebPage;
import com.quartztop.bot.tg_bot.integration.StockClient;
import com.quartztop.bot.tg_bot.repositories.BotUserRepositories;
import com.quartztop.bot.tg_bot.responses.telegramResponses.NextActionResult;
import com.quartztop.bot.tg_bot.services.crud.ActionClickService;
import com.quartztop.bot.tg_bot.services.crud.SearchRequestService;
import com.quartztop.bot.tg_bot.services.crud.TicketMessageService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.client.okhttp.OkHttpTelegramClient;
import org.telegram.telegrambots.longpolling.interfaces.LongPollingUpdateConsumer;
import org.telegram.telegrambots.longpolling.starter.SpringLongPollingBot;
import org.telegram.telegrambots.longpolling.util.LongPollingSingleThreadUpdateConsumer;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.api.objects.message.Message;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.generics.TelegramClient;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;



@Slf4j
@Component
public class TelegramBot implements SpringLongPollingBot, LongPollingSingleThreadUpdateConsumer{

    private final TelegramClient telegramClient;
    private final BotConfig botConfig;
    private final StockClient stockClient;
    private final ActionClient actionClient;
    private final CallbackHandler callbackHandler;
    private final BotMessageUtils botMessageUtils;
    private final RegistrationHandler registrationHandler;
    private final BotUserRepositories botUserRepositories;
    private final ActionClickService actionClickService;
    private final SearchRequestService searchRequestService;
    private final BotMenuService botMenuService;
    private final TicketMessageService ticketMessageService;
    private final TicketSessionService ticketSessionService;

    private final SendMessageToWebPage sendMessageToWeb;

    @Value("${file.upload-dir}")
    private String uploadDir;

    public TelegramBot(BotConfig botConfig, StockClient stockClient, ActionClient actionClient, CallbackHandler callbackHandler, BotMessageUtils botMessageUtils, RegistrationHandler registrationHandler, BotUserRepositories botUserRepositories, ActionClickService actionClickService, SearchRequestService searchRequestService, BotMenuService botMenuService, TicketMessageService ticketMessageService, TicketSessionService ticketSessionService, SendMessageToWebPage sendMessageToWeb) {
        this.botConfig = botConfig;
        telegramClient = new OkHttpTelegramClient(botConfig.getToken());
        this.stockClient = stockClient;
        this.actionClient = actionClient;
        this.callbackHandler = callbackHandler;
        this.botMessageUtils = botMessageUtils;
        this.registrationHandler = registrationHandler;
        this.botUserRepositories = botUserRepositories;
        this.actionClickService = actionClickService;
        this.searchRequestService = searchRequestService;
        this.botMenuService = botMenuService;
        this.ticketMessageService = ticketMessageService;
        this.ticketSessionService = ticketSessionService;
        this.sendMessageToWeb = sendMessageToWeb;
    }

    private final Map<Long, String> userState = new ConcurrentHashMap<>();

    @Override
    public void consume(Update update) {

        // –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª callback
        if (update.hasCallbackQuery()) {
            try {
                User tgUser = update.getCallbackQuery().getFrom();
                callbackHandler.handleCallback(update.getCallbackQuery(), userState, tgUser);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
            return;
        }

        Message message = update.getMessage();
        User tgUser = message.getFrom();
        long chatId = message.getChatId();

        String text = message.getText();

        // –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
        if (update.getMessage().hasContact()) {
            BotUser user = botUserRepositories.findByTelegramId(tgUser.getId()).orElse(null);
            try {
                registrationHandler.handleRegistrationSteps(user, message, userState);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }

        if (update.hasMessage() && update.getMessage().hasText()) {

            registrationHandler.registerUserIfNeeded(tgUser);
            BotUser user = botUserRepositories.findByTelegramId(tgUser.getId()).orElse(null);

            String state = userState.get(chatId);

            if (user != null && user.getStatus() == BotUserStatus.REGISTERED) {
                try {
                    registrationHandler.handleRegistrationSteps(user, message, userState);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
                return;
            }
            switch (text) {
                case "/start" -> {
                    send(BotMenuService.mainMenu(chatId, user));
                    userState.put(chatId, "MAIN_MENU");
                }
                case "üì¶ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ" -> {
                    sendText(chatId, "üîé –í–≤–µ–¥–∏ –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:");
                    userState.put(chatId, "SEARCH_MODE"); // —Å—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
                }
                case "üì∑ –§–æ—Ç–æ –∏–∑–¥–µ–ª–∏–π" -> {
                    actionClickService.create(null, user, ClickType.GET_PHOTO);
                    send(botMenuService.linkImageMenu(chatId));
                    userState.put(chatId, "PHOTOS_MENU");
                }
                case "üéÅ –ê–∫—Ü–∏–∏" -> {
                    actionClickService.create(null, user, ClickType.ACTION_CLICK);
                    NextActionResult result = actionClient.getNextAction(null, user);
                    if (!result.isSuccess()) {
                        sendText(chatId, "‚õî –°–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ.");
                        return;
                    }
                    if (!result.hasAction()) {
                        sendText(chatId, "üéâ –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π");
                        return;
                    }
                    try {
                        botMessageUtils.sendPreviewAction(chatId,result.getAction());
                    } catch (InterruptedException e) {
                        throw new RuntimeException(e);
                    }
                    userState.put(chatId, "ACTIONS_MODE"); // —Å—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                }
                case "‚ùì–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å" -> {
                    sendText(chatId, "‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å");
                    userState.put(chatId, "TEXT_MODE");
                }
                case "\uD83D\uDCCA –û—Ç—á–µ—Ç—ã" -> {
                    send(BotMenuService.reportMenu(chatId, user));
                }
                case "\uD83D\uDCCA –û—Å–Ω–æ–≤–Ω–æ–π –û—Ç—á–µ—Ç" -> {
                    send(BotMenuService.linkGeneralReportMenu(chatId, user, "GENERAL_REPORT:"));
                }
                case "\uD83D\uDCCA –û—Å–Ω–æ–≤–Ω–æ–π –û—Ç—á–µ—Ç –ò–Ω—Ç–µ—Ä–°—Ç–æ—É–Ω" -> {
                    send(BotMenuService.linkGeneralReportMenu(chatId, user, "GENERAL_REPORT_INTER_STONE:"));
                }
                case "\uD83D\uDCCA –†–µ–π—Ç–∏–Ω–≥–∏ —Ç–æ–≤–∞—Ä–æ–≤" -> {
                    send(BotMenuService.linkGeneralReportMenu(chatId, user, "RATING_REPORT:"));
                }
                case "\uD83D\uDCCA –†–µ–π—Ç–∏–Ω–≥–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ò–Ω—Ç–µ—Ä–°—Ç–æ—É–Ω" -> {
                    send(BotMenuService.linkGeneralReportMenu(chatId, user, "RATING_REPORT_INTER_STONE:"));
                }
                case "\uD83D\uDCCA –û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤" -> {
                    send(BotMenuService.linkStockReportMenu(chatId,user));
                }
                default -> {
                    state = userState.getOrDefault(chatId, "MAIN_MENU");

                    switch (state) {
                        case "SEARCH_MODE" -> {
                            sendText(chatId, "üîç –ò—â—É —Ç–æ–≤–∞—Ä: " + text);
                            String responseString = stockClient.getStockBySearch(text);
                            searchRequestService.create(text,user);

                            if (!responseString.startsWith("üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")) {
                                sendMessageToWeb.sendListStockRequest();
                            }

                            if (responseString.length() < 4096) {
                                sendText(chatId,responseString);
                            } else {
                                sendText(chatId, "–û–ô ... –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –æ—Ç–≤–µ—Ç - –¢–µ–ª–µ–≥—Ä–∞–º –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å!");
                            }
                            if(responseString.contains("‚Äº\uFE0F"))
                                sendText(chatId, "‚ö†\uFE0F –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: \n–µ—Å–ª–∏ –≤–∏–¥–∏—Ç–µ –∑–Ω–∞—á–∫–∏ ‚Äº\uFE0F \uD83D\uDCDE ‚Äî —Ç–æ–≤–∞—Ä –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.!");
                            if (!responseString.startsWith("üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")) {
                                sendText(chatId,"–ß—Ç–æ –µ—â–µ –ø–æ–∏—â–µ–º? ü§ñ");
                            }

                            send(BotMenuService.mainMenu(chatId, user));
                        }
                        case "TEXT_MODE" -> {
                            // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è ChatGPT ‚Äî –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä—É—Ç–∏—Ç—å OpenAI API —Ç—É—Ç
                            sendText(chatId, "‚úÖ –°–ø–∞—Å–∏–±–æ, –≤–æ–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω!\n" +
                                    "\n" +
                                    "—è —É–∂–µ –ø–µ—Ä–µ–¥–∞–ª –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–±—ã—á–Ω–æ –æ–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞.\n" +
                                    "\n" +
                                    "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π ‚Äî —Ç–µ–±–µ –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç –ø–æ—è–≤–∏—Ç—Å—è.");

                            TicketMessage ticket = ticketMessageService.addQuestion(user, text);
                            send(BotMenuService.mainMenu(chatId, user));
                            sendMessageToWeb.sendMessage(TelegramMessageDto.builder()
                                    .text(text)
                                    .username(user.getUsername())
                                    .build());
                            actionClickService.create(ticket.getId(), user, ClickType.CREATE_QUESTION);
                            botMessageUtils.sendAdminQuestionNotification(user,ticket);
                            userState.put(chatId, "MAIN_MENU");
                        }
                        case "AWAITING_ANSWER_TICKET" -> {

                            String ticketNumber = ticketSessionService.getTicketId(chatId);
                            ticketMessageService.addAnswer(ticketNumber,user,text);
                            sendText(chatId, "–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.");
                            TicketMessage startTicketMessage = ticketMessageService.getFirstMessageTicketByTicketNumber(ticketNumber);
                            String answer = "\uD83D\uDE4C –ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞! \n\n–Ø —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å:\n\n\uD83D\uDCE8 –í–æ–ø—Ä–æ—Å: \n" +
                                    startTicketMessage.getText() + "\n\n\uD83D\uDC69\u200D\uD83D\uDCBC –û—Ç–≤–µ—Ç –æ—Ç –Ω–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: \n" +
                                    text + "\n\n\uD83D\uDE42 –ï—Å–ª–∏ –µ—â—ë —á—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ ‚Äî –ø–∏—à–∏, —è –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!";
                            sendText(startTicketMessage.getBotUser().getTelegramId(),answer);
                        }
                        default -> {
                            sendText(chatId, "ü§∑ –Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª. –í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:");
                            send(BotMenuService.mainMenu(chatId, user));
                            userState.put(chatId, "MAIN_MENU");
                        }
                    }
                }
            }
        }

    }


    private void sendText(long chatId, String text) {
        SendMessage message = SendMessage.builder()
                .chatId(chatId)
                .text(text)
                .parseMode("HTML")
                .build();
        send(message);
    }

    private void send(SendMessage message) {
        try {
            telegramClient.execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è" + e.getMessage());
        }
    }

    @Override
    public String getBotToken() {
        return botConfig.getToken();
    }

    @Override
    public LongPollingUpdateConsumer getUpdatesConsumer() {
        return this;
    }
}
