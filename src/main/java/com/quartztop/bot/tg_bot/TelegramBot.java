package com.quartztop.bot.tg_bot;


import com.quartztop.bot.tg_bot.config.BotConfig;
import com.quartztop.bot.tg_bot.dto.TelegramActionDto;
import com.quartztop.bot.tg_bot.entity.BotUser;
import com.quartztop.bot.tg_bot.entity.UserStatus;
import com.quartztop.bot.tg_bot.repositories.BotUserRepositories;
import com.quartztop.bot.tg_bot.services.NextActionResult;
import com.quartztop.bot.tg_bot.services.StockClient;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.client.okhttp.OkHttpTelegramClient;
import org.telegram.telegrambots.longpolling.interfaces.LongPollingUpdateConsumer;
import org.telegram.telegrambots.longpolling.starter.SpringLongPollingBot;
import org.telegram.telegrambots.longpolling.util.LongPollingSingleThreadUpdateConsumer;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.api.objects.message.Message;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardRow;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.generics.TelegramClient;

import java.io.File;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;



@Slf4j
@Component
//@RequiredArgsConstructor
public class TelegramBot implements SpringLongPollingBot, LongPollingSingleThreadUpdateConsumer{

    private final TelegramClient telegramClient;
    private final BotConfig botConfig;
    private final StockClient stockClient;
    private final BotUserRepositories botUserRepositories;

    @Value("${file.upload-dir}")
    private String uploadDir;

    public TelegramBot(BotConfig botConfig, StockClient stockClient, BotUserRepositories botUserRepositories) {
        this.botConfig = botConfig;
        telegramClient = new OkHttpTelegramClient(botConfig.getToken());
        this.stockClient = stockClient;
        this.botUserRepositories = botUserRepositories;
    }

    private final Map<Long, String> userState = new ConcurrentHashMap<>();

    @Override
    public void consume(Update update) {
        // –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª callback
        if (update.hasCallbackQuery()) {
            try {
                handleCallback(update.getCallbackQuery());
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
            return;
        }

        Message message = update.getMessage();
        User tgUser = message.getFrom();
        long chatId = message.getChatId();
        String text = message.getText();

        // –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
        if (update.getMessage().hasContact()) {
            BotUser user = botUserRepositories.findByTelegramId(tgUser.getId()).orElse(null);
            log.error("CONTACT GETTED");
            try {
                handleRegistrationSteps(user, message);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }

        if (update.hasMessage() && update.getMessage().hasText()) {

            registerUserIfNeeded(tgUser);
            BotUser user = botUserRepositories.findByTelegramId(tgUser.getId()).orElse(null);

            String state = userState.get(chatId);
            log.error("USER IS NULL? " + (user == null));

            if (user != null && user.getStatus() == UserStatus.REGISTERED) {
                try {
                    handleRegistrationSteps(user, message);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
                return;
            }
            log.error("PRINT STATE " + state + " USER STATUS " + user.getStatus());


            switch (text) {
                case "/start" -> {
                    sendMainMenu(chatId);
                    userState.put(chatId, "MAIN_MENU");
                }
                case "üì¶ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ" -> {
                    sendText(chatId, "üîé –í–≤–µ–¥–∏ –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:");
                    userState.put(chatId, "SEARCH_MODE"); // —Å—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
                }
                case "üì∑ –§–æ—Ç–æ –∏–∑–¥–µ–ª–∏–π" -> {
                    sendText(chatId, "üñºÔ∏è –í–æ—Ç —Ñ–æ—Ç–æ –∏–∑–¥–µ–ª–∏–π (–∑–∞–≥–ª—É—à–∫–∞)");
                    userState.put(chatId, "PHOTOS_MENU");
                }
                case "üéÅ –ê–∫—Ü–∏–∏" -> {
                    NextActionResult result = stockClient.getNextAction(null);
                    if (!result.isSuccess()) {
                        sendText(chatId, "‚õî –°–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ.");
                        return;
                    }
                    if (!result.hasAction()) {
                        sendText(chatId, "üéâ –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π");
                        return;
                    }
                    TelegramActionDto firstAction = result.getAction();
                    try {
                        sendPreviewAction(chatId,firstAction);
                    } catch (InterruptedException e) {
                        throw new RuntimeException(e);
                    }

                    userState.put(chatId, "ACTIONS_MODE"); // —Å—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                }
                case "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å " -> {
                    sendText(chatId, "‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, (–ó–∞–≥–ª—É—à–∫–∞)");
                    userState.put(chatId, "TEXT_MODE");
                }
                default -> {
                    state = userState.getOrDefault(chatId, "MAIN_MENU");

                    switch (state) {
                        case "SEARCH_MODE" -> {
                            // –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–∑—ã–≤–∞—Ç—å —Å–≤–æ–π StockClient –∏ –∏—Å–∫–∞—Ç—å –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
                            sendText(chatId, "üîç –ò—â—É —Ç–æ–≤–∞—Ä: " + text);
                            String responseString = stockClient.getStockBySearch(text);


                            if (responseString.length() < 4096) {
                                sendText(chatId,responseString);
                            } else {
                                log.warn("SIZE TEXT = " + responseString.length());
                                sendText(chatId, "–û–ô ... –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –æ—Ç–≤–µ—Ç - –¢–µ–ª–µ–≥—Ä–∞–º –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å!");
                            }
                            sendText(chatId,"–ß—Ç–æ –µ—â–µ –ø–æ–∏—â–µ–º? ü§ñ");
                        }
                        case "CHATGPT_MODE" -> {
                            // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è ChatGPT ‚Äî –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä—É—Ç–∏—Ç—å OpenAI API —Ç—É—Ç
                            sendText(chatId, "ü§ñ –û—Ç–≤–µ—Ç : (–∑–∞–≥–ª—É—à–∫–∞)");
                            sendMainMenu(chatId);
                            userState.put(chatId, "MAIN_MENU");
                        }
                        case "ACTIONS_MODE" -> {
                        }
                        default -> {
                            sendText(chatId, "ü§∑ –Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª. –í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:");
                            sendMainMenu(chatId);
                            userState.put(chatId, "MAIN_MENU");
                        }
                    }
                }
            }
        }
    }

    private void sendWelcomeMessage(Long chatId) {
        String welcomeText = """
            <b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>
            –Ø ‚Äî –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ <b>–ö–≤–∞—Ä—Ü—Ç–æ–ø</b> üß±
            
            –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏, —Ü–µ–Ω—ã –∏ –Ω–æ–≤–∏–Ω–∫–∏ üì¶
            
            –ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –Ω–∞—á–Ω—ë–º ‚Äî –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ë—É–∫–≤–∞–ª—å–Ω–æ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤ üòâ
            """;

        InlineKeyboardButton startButton = InlineKeyboardButton.builder()
                .text("üöÄ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
                .callbackData("start_registration")
                .build();

        InlineKeyboardRow row = new InlineKeyboardRow();
        row.add(startButton);

        List<InlineKeyboardRow> keyboard = new ArrayList<>();
        keyboard.add(row);

        InlineKeyboardMarkup markup = InlineKeyboardMarkup.builder()
                .keyboard(keyboard)
                .build();

        sendTextWithKeyboard(chatId, welcomeText, markup);
    }

    private void handleRegistrationSteps(BotUser user, Message message) throws InterruptedException {
        long chatId = message.getChatId();
        String state = userState.get(chatId);

        if (state == null) {
            sendWelcomeMessage(chatId);
            userState.put(chatId, "START_REGISTRATION");
            return;
        }
        switch (state) {
            case "AWAITING_PHONE" -> {
                if (message.hasContact()) {
                    log.error("MESSAGE HAVE CONTACT");
                    String phone = message.getContact().getPhoneNumber();
                    log.error("PRINT PHONE  " + phone);
                    user.setPhoneNumber(phone);
                    log.error("USER PHONE GETTED " + phone);
                    botUserRepositories.save(user);

                    log.error("USER PHONESAVED");
                    sendText(chatId, "‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω!");
                    userState.put(chatId, "AWAITING_NAME");
                    sendText(chatId, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è");
                } else {
                    sendPhoneRequestKeyboard(chatId);
                }
            }

            case "AWAITING_NAME" -> {
                if (message.hasText()) {
                    user.setFirstName(message.getText());
                    botUserRepositories.save(user);
                    userState.put(chatId, "AWAITING_LASTNAME");
                    sendText(chatId, "–û—Ç–ª–∏—á–Ω–æ " + user.getFirstName() + " –ø–æ–ª–¥–µ–ª–∞ —Å–¥–µ–ª–∞–Ω–æ! \n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é");
                }
            }
            case "AWAITING_LASTNAME" -> {
                if (message.hasText()) {
                    user.setLastName(message.getText());
                    user.setStatus(UserStatus.ACTIVE);
                    botUserRepositories.save(user);

                    sendText(chatId, "\uD83C\uDF89 –£—Ä–∞! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n" +
                            "\n" +
                            user.getFirstName() + " " + user.getLastName() +" —Ç—ã —Ç–µ–ø–µ—Ä—å –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ \uD83D\uDCAA\n" +
                            "–í—Å—ë —Å–∞–º–æ–µ –ø–æ–ª–µ–∑–Ω–æ–µ —É–∂–µ –ø–æ–¥ —Ä—É–∫–æ–π:\n" +
                            "–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏, —Ü–µ–Ω—ã, –º–µ–¥–∏–∞–º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –Ω–æ–≤–∏–Ω–∫–∏  \uD83E\uDDF1\n" +
                            "\n" +
                            "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å!");
                    userState.put(chatId, "MAIN_MENU");
                    sendMainMenu(chatId);
                }
            }
        }
    }

    private void sendPhoneRequestKeyboard(Long chatId) {

        String messageText = """
        üìû –î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üòâ
        
        –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É ‚¨áÔ∏è
        
        –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —è –ø—Ä–æ—Å—Ç–æ —Ö–æ—á—É —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ç—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–ª–æ–≤–µ–∫, –∞ –Ω–µ —Ç–∞–∫–æ–π –∫–∞–∫ —è ‚Äî –∂–µ–ª–µ–∑—è–∫–∞ —Å Wi-Fi üòÖ
        """;
        // –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–∞
        KeyboardButton requestContactButton = KeyboardButton.builder()
                .text("üì≤  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                .requestContact(true)
                .build();

        // –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–æ–π
        KeyboardRow row = new KeyboardRow();
        row.add(requestContactButton);

        // –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        ReplyKeyboardMarkup keyboardMarkup = ReplyKeyboardMarkup.builder()
                .keyboard(List.of(row))
                .resizeKeyboard(true)
                .oneTimeKeyboard(true)
                .build();

        // –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        SendMessage message = SendMessage.builder()
                .chatId(chatId)
                .text(messageText)
                .replyMarkup(keyboardMarkup)
                .build();

        send(message);
    }

    private void registerUserIfNeeded(User tgUser) {
        Long telegramId = tgUser.getId();
        if (!botUserRepositories.existsByTelegramId(telegramId)) {
            BotUser user = new BotUser();
            user.setTelegramId(telegramId);
            user.setUsername(tgUser.getUserName());
            user.setFirstName(tgUser.getFirstName());
            user.setLastName(tgUser.getLastName());
            user.setRegisteredAt(LocalDateTime.now());
            user.setStatus(UserStatus.REGISTERED);
            botUserRepositories.save(user);
            log.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + telegramId);
        }
    }

    private void handleCallback(CallbackQuery callbackQuery) throws InterruptedException {
        String data = callbackQuery.getData();
        Long chatId = callbackQuery.getMessage().getChatId();

        log.error("Print data " + data);

        if (data.startsWith("next_action_")) {
            String idStr = data.replace("next_action_", "");
            Long currentId = Long.parseLong(idStr);
            NextActionResult result = stockClient.getNextAction(currentId);
            if (!result.isSuccess()) {
                sendText(chatId, "‚õî –°–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ.");
                return;
            }
            if (!result.hasAction()) {
                sendText(chatId, "üéâ –ë–æ–ª—å—à–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π");
                return;
            }
            TelegramActionDto action = result.getAction();
            sendPreviewAction(chatId,action);
        }
        if (data.startsWith("action_")) {
            String idStr = data.replace("action_", "");
            long currentId = Long.parseLong(idStr);
            TelegramActionDto actionDto = stockClient.getActionById(currentId);
            sendFullAction(chatId, actionDto);
        }
        if ("start_registration".equals(data)) {
            sendText(chatId, "üìã  –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.");
            userState.put(chatId, "AWAITING_PHONE");
            sendPhoneRequestKeyboard(chatId);
        }
    }

    private void sendMainMenu(long chatId) {
        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("üì¶ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ"));
        row1.add(new KeyboardButton("üì∑ –§–æ—Ç–æ –∏–∑–¥–µ–ª–∏–π"));

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("üéÅ –ê–∫—Ü–∏–∏"));
        row2.add(new KeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å "));

        List<KeyboardRow> keyboard = new ArrayList<>();
        keyboard.add(row1);
        keyboard.add(row2);

        ReplyKeyboardMarkup markup = ReplyKeyboardMarkup.builder()
                .keyboard(keyboard)
                .resizeKeyboard(true)
                .oneTimeKeyboard(false)
                .build();
        SendMessage message = SendMessage.builder()
                .chatId(chatId)
                .text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ —Å–∞–º–æ–º –Ω–∏–∑—É \uD83D\uDC47")
                .replyMarkup(markup)
                .build();
        send(message);
    }
    private void sendText(long chatId, String text) {
        SendMessage message = SendMessage.builder()
                .chatId(chatId)
                .text(text)
                .parseMode("HTML")
                .build();
        send(message);
    }
    public void sendTextWithKeyboard(Long chatId, String text, InlineKeyboardMarkup keyboard) {
        SendMessage message = SendMessage.builder()
                .chatId(chatId.toString())
                .text(text)
                .parseMode("HTML")
                .replyMarkup(keyboard)
                .build();
        send(message);
    }

    private void send(SendMessage message) {
        try {
            telegramClient.execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è" + e.getMessage());
        }
    }

    // –ú–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
    private void send(SendPhoto sendPhoto) {
        try {
            telegramClient.execute(sendPhoto);
        } catch (TelegramApiException e) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è" + e.getMessage());
        }
    }

    private void sendFullAction(long chatId, TelegramActionDto actionDto) {
        //String detailsUrl = "action_" + actionDto.getId();
        String nextAction = "next_action_" + actionDto.getId();

        String messageText = "<b>" + actionDto.getName() + "</b>\n\n"
                + sanitizeHtmlForTelegram(actionDto.getContent());

        InlineKeyboardButton buttonNext = new InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è");
        buttonNext.setCallbackData(nextAction);

        InlineKeyboardRow row = new InlineKeyboardRow();
        row.add(buttonNext);
        List<InlineKeyboardRow> keyboard = new ArrayList<>(List.of(row));

        // —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        InlineKeyboardMarkup markup = InlineKeyboardMarkup.builder()
                .keyboard(keyboard)
                .build();

        sendTextWithKeyboard(chatId, messageText, markup);

    }

    private void sendPreviewAction(long chatId, TelegramActionDto dto) throws InterruptedException {
        if (dto.getTitleImageUrl() == null ) {
            sendText(chatId, dto.getName());
            return;
        }
        String detailsUrl = "action_" + dto.getId();
        String nextAction = "next_action_" + dto.getId();
        String caption = "<b>" + dto.getName() + "</b>\n" + sanitizeHtmlForTelegram(dto.getDescription());

        String relativePath = dto.getTitleImageUrl().replaceFirst("/uploads/", ""); // —É–±–∏—Ä–∞–µ–º "/uploads/"
        String imagePath = uploadDir + relativePath;

        InlineKeyboardButton button = new InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ");
        button.setCallbackData(detailsUrl);

        InlineKeyboardButton buttonNext = new InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è");
        buttonNext.setCallbackData(nextAction);

        InlineKeyboardRow row = new InlineKeyboardRow();
        row.add(button);
        row.add(buttonNext);
        List<InlineKeyboardRow> keyboard = new ArrayList<>(List.of(row));

        // —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        InlineKeyboardMarkup markup = InlineKeyboardMarkup.builder()
                .keyboard(keyboard)
                .build();

        InputFile photoFile = new InputFile(new File(imagePath));

        // –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        SendPhoto photo = SendPhoto.builder()
                .chatId(String.valueOf(chatId))
                .photo(photoFile)
                .caption(caption)
                .parseMode("HTML")
                .replyMarkup(markup)
                .build();

        send(photo);
        Thread.sleep(500);
    }

    public static String sanitizeHtmlForTelegram(String html) {

        if (html == null) return "";
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ <p>, <div> –∏ —Ç.–ø., –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ \n
        String cleaned = html.replaceAll("(?i)</?p[^>]*>", "\n");

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ data-–∞—Ç—Ä–∏–±—É—Ç—ã –∏ —Å—Ç–∏–ª–∏
        cleaned = cleaned.replaceAll("(?i)\\s(data-[a-z\\-]+|style)=\"[^\"]*\"", "");

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏, –∫—Ä–æ–º–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö
        cleaned = cleaned.replaceAll("(?i)<(?!/?(b|strong|i|em|u|ins|s|strike|del|a|code|pre)(\\s|>|$)).*?>", "");

        // Telegram –Ω–µ –ª—é–±–∏—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        return cleaned.trim();
    }



    @Override
    public String getBotToken() {
        return botConfig.getToken();
    }

    @Override
    public LongPollingUpdateConsumer getUpdatesConsumer() {
        return this;
    }
}
